<div class="post post-show">
	<% if @post.nil? %>
		<% @post = Post.new %>
	<% end %>
	<%= form_for @post, id: "postform", :html => { :multipart => true } do |f| %>
		
		<h2 class="card-title">
			<%= f.label :title %><br>
			<%= f.text_field :title %>
		</h2>
	<div class="panel-body flex-text">
			<%= f.label :description %><br>
			<%= f.text_area :description, style: "min-width: 100%", rows: "5" %> 
		
		<p>
			<%= f.label :tag_list, "Tags (separated by commas)" %><br />
			<%= f.text_field :tag_list, size: '40x8' %>
		</p>

		<%= render 'images_upload', :post => f %>  

		<%= f.fields_for :attachements do |fa| %>
			<div class="modal-pictures">
				Change Image:<%= fa.file_field :image %>
				Delete Image <%= fa.check_box "_destroy" %><br />
				<%= image_tag fa.object.image.url(:small), class: "img-thumbnail" %>
				<br />
			</div>
		<% end %>

		<p><br />
			Add a Location:
			<%= f.text_field :loc_name, placeholder: "Location", id: "autocomplete", onFocus: "geolocate()", type: "text", size: '40x8' %><br />
			<%=f.hidden_field :lng, id: "lng" %>
	    	<%=f.hidden_field :lat, id: "lat" %>
	    	<%=f.hidden_field :loc_name, id: "formatted_address" %>
		</p>
	</div>
		<!--div class="map_canvas"></div-->


		<div class="modal-footer">
			<%= f.button 'Save', id: "save-button", :class => 'btn btn-primary' %>
			<%= link_to 'Back', posts_path, type: "button", class: "btn btn-primary btn-default" %>
		</div>
	<% end %>
</div>


    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        document.getElementById('lat').value = place.geometry.location.lat();
        document.getElementById('lng').value = place.geometry.location.lng();
        document.getElementById('formatted_address').value = place.formatted_address;

      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD-CClVVnN2RnG6ICiyr-Vh_qLgQpbYhU0&libraries=places&callback=initAutocomplete"
        async defer></script>
	